/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Eatinghistory
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersEatinghistory,
    ControllersEatinghistoryFromJSON,
    ControllersEatinghistoryToJSON,
    ControllersFoodmenu,
    ControllersFoodmenuFromJSON,
    ControllersFoodmenuToJSON,
    ControllersMealplan,
    ControllersMealplanFromJSON,
    ControllersMealplanToJSON,
    EntEatinghistory,
    EntEatinghistoryFromJSON,
    EntEatinghistoryToJSON,
    EntFoodmenu,
    EntFoodmenuFromJSON,
    EntFoodmenuToJSON,
    EntMealplan,
    EntMealplanFromJSON,
    EntMealplanToJSON,
    EntTaste,
    EntTasteFromJSON,
    EntTasteToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateEatinghistoryRequest {
    eatinghistory: ControllersEatinghistory;
}

export interface CreateFoodmenuRequest {
    foodmenu: ControllersFoodmenu;
}

export interface CreateMealplanRequest {
    mealplan: ControllersMealplan;
}

export interface CreateTasteRequest {
    taste: EntTaste;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteEatinghistoryRequest {
    id: number;
}

export interface DeleteFoodmenuRequest {
    id: number;
}

export interface DeleteMealplanRequest {
    id: number;
}

export interface DeleteTasteRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetFoodmenuRequest {
    id: number;
}

export interface GetMealplanRequest {
    id: number;
}

export interface GetTasteRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListEatinghistoryRequest {
    limit?: number;
    offset?: number;
}

export interface ListFoodmenuRequest {
    limit?: number;
    offset?: number;
}

export interface ListMealplanRequest {
    limit?: number;
    offset?: number;
}

export interface ListTasteRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateFoodmenuRequest {
    id: number;
    foodmenu: EntFoodmenu;
}

export interface UpdateMealplanRequest {
    id: number;
    mealplan: EntMealplan;
}

export interface UpdateTasteRequest {
    id: number;
    taste: EntTaste;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create eatinghistory
     * Create eatinghistory
     */
    async createEatinghistoryRaw(requestParameters: CreateEatinghistoryRequest): Promise<runtime.ApiResponse<EntEatinghistory>> {
        if (requestParameters.eatinghistory === null || requestParameters.eatinghistory === undefined) {
            throw new runtime.RequiredError('eatinghistory','Required parameter requestParameters.eatinghistory was null or undefined when calling createEatinghistory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/eatinghistorys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersEatinghistoryToJSON(requestParameters.eatinghistory),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEatinghistoryFromJSON(jsonValue));
    }

    /**
     * Create eatinghistory
     * Create eatinghistory
     */
    async createEatinghistory(requestParameters: CreateEatinghistoryRequest): Promise<EntEatinghistory> {
        const response = await this.createEatinghistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create foodmenu
     * Create foodmenu
     */
    async createFoodmenuRaw(requestParameters: CreateFoodmenuRequest): Promise<runtime.ApiResponse<EntFoodmenu>> {
        if (requestParameters.foodmenu === null || requestParameters.foodmenu === undefined) {
            throw new runtime.RequiredError('foodmenu','Required parameter requestParameters.foodmenu was null or undefined when calling createFoodmenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/foodmenus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersFoodmenuToJSON(requestParameters.foodmenu),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFoodmenuFromJSON(jsonValue));
    }

    /**
     * Create foodmenu
     * Create foodmenu
     */
    async createFoodmenu(requestParameters: CreateFoodmenuRequest): Promise<EntFoodmenu> {
        const response = await this.createFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create mealplan
     * Create mealplan
     */
    async createMealplanRaw(requestParameters: CreateMealplanRequest): Promise<runtime.ApiResponse<EntMealplan>> {
        if (requestParameters.mealplan === null || requestParameters.mealplan === undefined) {
            throw new runtime.RequiredError('mealplan','Required parameter requestParameters.mealplan was null or undefined when calling createMealplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mealplans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersMealplanToJSON(requestParameters.mealplan),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMealplanFromJSON(jsonValue));
    }

    /**
     * Create mealplan
     * Create mealplan
     */
    async createMealplan(requestParameters: CreateMealplanRequest): Promise<EntMealplan> {
        const response = await this.createMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create taste
     * Create taste
     */
    async createTasteRaw(requestParameters: CreateTasteRequest): Promise<runtime.ApiResponse<EntTaste>> {
        if (requestParameters.taste === null || requestParameters.taste === undefined) {
            throw new runtime.RequiredError('taste','Required parameter requestParameters.taste was null or undefined when calling createTaste.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tastes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTasteToJSON(requestParameters.taste),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTasteFromJSON(jsonValue));
    }

    /**
     * Create taste
     * Create taste
     */
    async createTaste(requestParameters: CreateTasteRequest): Promise<EntTaste> {
        const response = await this.createTasteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get eatinghistory by ID
     * Delete a eatinghistory entity by ID
     */
    async deleteEatinghistoryRaw(requestParameters: DeleteEatinghistoryRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEatinghistory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/eatinghistorys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get eatinghistory by ID
     * Delete a eatinghistory entity by ID
     */
    async deleteEatinghistory(requestParameters: DeleteEatinghistoryRequest): Promise<object> {
        const response = await this.deleteEatinghistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get foodmenu by ID
     * Delete a foodmenu entity by ID
     */
    async deleteFoodmenuRaw(requestParameters: DeleteFoodmenuRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFoodmenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foodmenus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get foodmenu by ID
     * Delete a foodmenu entity by ID
     */
    async deleteFoodmenu(requestParameters: DeleteFoodmenuRequest): Promise<object> {
        const response = await this.deleteFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mealplan by ID
     * Delete a mealplan entity by ID
     */
    async deleteMealplanRaw(requestParameters: DeleteMealplanRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMealplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mealplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get mealplan by ID
     * Delete a mealplan entity by ID
     */
    async deleteMealplan(requestParameters: DeleteMealplanRequest): Promise<object> {
        const response = await this.deleteMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * get taste by ID
     * Delete a taste entity by ID
     */
    async deleteTasteRaw(requestParameters: DeleteTasteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTaste.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tastes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get taste by ID
     * Delete a taste entity by ID
     */
    async deleteTaste(requestParameters: DeleteTasteRequest): Promise<object> {
        const response = await this.deleteTasteRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get foodmenu by ID
     * Get a foodmenu entity by ID
     */
    async getFoodmenuRaw(requestParameters: GetFoodmenuRequest): Promise<runtime.ApiResponse<EntFoodmenu>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFoodmenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foodmenus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFoodmenuFromJSON(jsonValue));
    }

    /**
     * get foodmenu by ID
     * Get a foodmenu entity by ID
     */
    async getFoodmenu(requestParameters: GetFoodmenuRequest): Promise<EntFoodmenu> {
        const response = await this.getFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mealplan by ID
     * Get a mealplan entity by ID
     */
    async getMealplanRaw(requestParameters: GetMealplanRequest): Promise<runtime.ApiResponse<EntMealplan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMealplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mealplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMealplanFromJSON(jsonValue));
    }

    /**
     * get mealplan by ID
     * Get a mealplan entity by ID
     */
    async getMealplan(requestParameters: GetMealplanRequest): Promise<EntMealplan> {
        const response = await this.getMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * get taste by ID
     * Get a taste entity by ID
     */
    async getTasteRaw(requestParameters: GetTasteRequest): Promise<runtime.ApiResponse<EntTaste>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTaste.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tastes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTasteFromJSON(jsonValue));
    }

    /**
     * get taste by ID
     * Get a taste entity by ID
     */
    async getTaste(requestParameters: GetTasteRequest): Promise<EntTaste> {
        const response = await this.getTasteRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list eatinghistory entities
     * List eatinghistory entities
     */
    async listEatinghistoryRaw(requestParameters: ListEatinghistoryRequest): Promise<runtime.ApiResponse<Array<EntEatinghistory>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/eatinghistorys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEatinghistoryFromJSON));
    }

    /**
     * list eatinghistory entities
     * List eatinghistory entities
     */
    async listEatinghistory(requestParameters: ListEatinghistoryRequest): Promise<Array<EntEatinghistory>> {
        const response = await this.listEatinghistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * list foodmenu entities
     * List foodmenu entities
     */
    async listFoodmenuRaw(requestParameters: ListFoodmenuRequest): Promise<runtime.ApiResponse<Array<EntFoodmenu>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foodmenus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFoodmenuFromJSON));
    }

    /**
     * list foodmenu entities
     * List foodmenu entities
     */
    async listFoodmenu(requestParameters: ListFoodmenuRequest): Promise<Array<EntFoodmenu>> {
        const response = await this.listFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * list mealplan entities
     * List mealplan entities
     */
    async listMealplanRaw(requestParameters: ListMealplanRequest): Promise<runtime.ApiResponse<Array<EntMealplan>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mealplans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMealplanFromJSON));
    }

    /**
     * list mealplan entities
     * List mealplan entities
     */
    async listMealplan(requestParameters: ListMealplanRequest): Promise<Array<EntMealplan>> {
        const response = await this.listMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * list taste entities
     * List taste entities
     */
    async listTasteRaw(requestParameters: ListTasteRequest): Promise<runtime.ApiResponse<Array<EntTaste>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tastes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTasteFromJSON));
    }

    /**
     * list taste entities
     * List taste entities
     */
    async listTaste(requestParameters: ListTasteRequest): Promise<Array<EntTaste>> {
        const response = await this.listTasteRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update foodmenu by ID
     * Update a foodmenu entity by ID
     */
    async updateFoodmenuRaw(requestParameters: UpdateFoodmenuRequest): Promise<runtime.ApiResponse<EntFoodmenu>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFoodmenu.');
        }

        if (requestParameters.foodmenu === null || requestParameters.foodmenu === undefined) {
            throw new runtime.RequiredError('foodmenu','Required parameter requestParameters.foodmenu was null or undefined when calling updateFoodmenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/foodmenus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntFoodmenuToJSON(requestParameters.foodmenu),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFoodmenuFromJSON(jsonValue));
    }

    /**
     * update foodmenu by ID
     * Update a foodmenu entity by ID
     */
    async updateFoodmenu(requestParameters: UpdateFoodmenuRequest): Promise<EntFoodmenu> {
        const response = await this.updateFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * update mealplan by ID
     * Update a mealplan entity by ID
     */
    async updateMealplanRaw(requestParameters: UpdateMealplanRequest): Promise<runtime.ApiResponse<EntMealplan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMealplan.');
        }

        if (requestParameters.mealplan === null || requestParameters.mealplan === undefined) {
            throw new runtime.RequiredError('mealplan','Required parameter requestParameters.mealplan was null or undefined when calling updateMealplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mealplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMealplanToJSON(requestParameters.mealplan),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMealplanFromJSON(jsonValue));
    }

    /**
     * update mealplan by ID
     * Update a mealplan entity by ID
     */
    async updateMealplan(requestParameters: UpdateMealplanRequest): Promise<EntMealplan> {
        const response = await this.updateMealplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * update taste by ID
     * Update a taste entity by ID
     */
    async updateTasteRaw(requestParameters: UpdateTasteRequest): Promise<runtime.ApiResponse<EntTaste>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTaste.');
        }

        if (requestParameters.taste === null || requestParameters.taste === undefined) {
            throw new runtime.RequiredError('taste','Required parameter requestParameters.taste was null or undefined when calling updateTaste.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tastes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntTasteToJSON(requestParameters.taste),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTasteFromJSON(jsonValue));
    }

    /**
     * update taste by ID
     * Update a taste entity by ID
     */
    async updateTaste(requestParameters: UpdateTasteRequest): Promise<EntTaste> {
        const response = await this.updateTasteRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
