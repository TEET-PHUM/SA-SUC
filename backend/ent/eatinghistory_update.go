// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/Teeth/app/ent/eatinghistory"
	"github.com/Teeth/app/ent/foodmenu"
	"github.com/Teeth/app/ent/mealplan"
	"github.com/Teeth/app/ent/predicate"
	"github.com/Teeth/app/ent/taste"
	"github.com/Teeth/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EatinghistoryUpdate is the builder for updating Eatinghistory entities.
type EatinghistoryUpdate struct {
	config
	hooks      []Hook
	mutation   *EatinghistoryMutation
	predicates []predicate.Eatinghistory
}

// Where adds a new predicate for the builder.
func (eu *EatinghistoryUpdate) Where(ps ...predicate.Eatinghistory) *EatinghistoryUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetAddedTime sets the added_time field.
func (eu *EatinghistoryUpdate) SetAddedTime(t time.Time) *EatinghistoryUpdate {
	eu.mutation.SetAddedTime(t)
	return eu
}

// SetFoodmenuID sets the foodmenu edge to Foodmenu by id.
func (eu *EatinghistoryUpdate) SetFoodmenuID(id int) *EatinghistoryUpdate {
	eu.mutation.SetFoodmenuID(id)
	return eu
}

// SetNillableFoodmenuID sets the foodmenu edge to Foodmenu by id if the given value is not nil.
func (eu *EatinghistoryUpdate) SetNillableFoodmenuID(id *int) *EatinghistoryUpdate {
	if id != nil {
		eu = eu.SetFoodmenuID(*id)
	}
	return eu
}

// SetFoodmenu sets the foodmenu edge to Foodmenu.
func (eu *EatinghistoryUpdate) SetFoodmenu(f *Foodmenu) *EatinghistoryUpdate {
	return eu.SetFoodmenuID(f.ID)
}

// SetMealplanID sets the mealplan edge to Mealplan by id.
func (eu *EatinghistoryUpdate) SetMealplanID(id int) *EatinghistoryUpdate {
	eu.mutation.SetMealplanID(id)
	return eu
}

// SetNillableMealplanID sets the mealplan edge to Mealplan by id if the given value is not nil.
func (eu *EatinghistoryUpdate) SetNillableMealplanID(id *int) *EatinghistoryUpdate {
	if id != nil {
		eu = eu.SetMealplanID(*id)
	}
	return eu
}

// SetMealplan sets the mealplan edge to Mealplan.
func (eu *EatinghistoryUpdate) SetMealplan(m *Mealplan) *EatinghistoryUpdate {
	return eu.SetMealplanID(m.ID)
}

// SetTasteID sets the taste edge to Taste by id.
func (eu *EatinghistoryUpdate) SetTasteID(id int) *EatinghistoryUpdate {
	eu.mutation.SetTasteID(id)
	return eu
}

// SetNillableTasteID sets the taste edge to Taste by id if the given value is not nil.
func (eu *EatinghistoryUpdate) SetNillableTasteID(id *int) *EatinghistoryUpdate {
	if id != nil {
		eu = eu.SetTasteID(*id)
	}
	return eu
}

// SetTaste sets the taste edge to Taste.
func (eu *EatinghistoryUpdate) SetTaste(t *Taste) *EatinghistoryUpdate {
	return eu.SetTasteID(t.ID)
}

// SetUserID sets the user edge to User by id.
func (eu *EatinghistoryUpdate) SetUserID(id int) *EatinghistoryUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (eu *EatinghistoryUpdate) SetNillableUserID(id *int) *EatinghistoryUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the user edge to User.
func (eu *EatinghistoryUpdate) SetUser(u *User) *EatinghistoryUpdate {
	return eu.SetUserID(u.ID)
}

// Mutation returns the EatinghistoryMutation object of the builder.
func (eu *EatinghistoryUpdate) Mutation() *EatinghistoryMutation {
	return eu.mutation
}

// ClearFoodmenu clears the foodmenu edge to Foodmenu.
func (eu *EatinghistoryUpdate) ClearFoodmenu() *EatinghistoryUpdate {
	eu.mutation.ClearFoodmenu()
	return eu
}

// ClearMealplan clears the mealplan edge to Mealplan.
func (eu *EatinghistoryUpdate) ClearMealplan() *EatinghistoryUpdate {
	eu.mutation.ClearMealplan()
	return eu
}

// ClearTaste clears the taste edge to Taste.
func (eu *EatinghistoryUpdate) ClearTaste() *EatinghistoryUpdate {
	eu.mutation.ClearTaste()
	return eu
}

// ClearUser clears the user edge to User.
func (eu *EatinghistoryUpdate) ClearUser() *EatinghistoryUpdate {
	eu.mutation.ClearUser()
	return eu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EatinghistoryUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EatinghistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EatinghistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EatinghistoryUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EatinghistoryUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EatinghistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eatinghistory.Table,
			Columns: eatinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eatinghistory.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: eatinghistory.FieldAddedTime,
		})
	}
	if eu.mutation.FoodmenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.FoodmenuTable,
			Columns: []string{eatinghistory.FoodmenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FoodmenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.FoodmenuTable,
			Columns: []string{eatinghistory.FoodmenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.MealplanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.MealplanTable,
			Columns: []string{eatinghistory.MealplanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mealplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.MealplanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.MealplanTable,
			Columns: []string{eatinghistory.MealplanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mealplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TasteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.TasteTable,
			Columns: []string{eatinghistory.TasteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taste.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TasteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.TasteTable,
			Columns: []string{eatinghistory.TasteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taste.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.UserTable,
			Columns: []string{eatinghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.UserTable,
			Columns: []string{eatinghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eatinghistory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EatinghistoryUpdateOne is the builder for updating a single Eatinghistory entity.
type EatinghistoryUpdateOne struct {
	config
	hooks    []Hook
	mutation *EatinghistoryMutation
}

// SetAddedTime sets the added_time field.
func (euo *EatinghistoryUpdateOne) SetAddedTime(t time.Time) *EatinghistoryUpdateOne {
	euo.mutation.SetAddedTime(t)
	return euo
}

// SetFoodmenuID sets the foodmenu edge to Foodmenu by id.
func (euo *EatinghistoryUpdateOne) SetFoodmenuID(id int) *EatinghistoryUpdateOne {
	euo.mutation.SetFoodmenuID(id)
	return euo
}

// SetNillableFoodmenuID sets the foodmenu edge to Foodmenu by id if the given value is not nil.
func (euo *EatinghistoryUpdateOne) SetNillableFoodmenuID(id *int) *EatinghistoryUpdateOne {
	if id != nil {
		euo = euo.SetFoodmenuID(*id)
	}
	return euo
}

// SetFoodmenu sets the foodmenu edge to Foodmenu.
func (euo *EatinghistoryUpdateOne) SetFoodmenu(f *Foodmenu) *EatinghistoryUpdateOne {
	return euo.SetFoodmenuID(f.ID)
}

// SetMealplanID sets the mealplan edge to Mealplan by id.
func (euo *EatinghistoryUpdateOne) SetMealplanID(id int) *EatinghistoryUpdateOne {
	euo.mutation.SetMealplanID(id)
	return euo
}

// SetNillableMealplanID sets the mealplan edge to Mealplan by id if the given value is not nil.
func (euo *EatinghistoryUpdateOne) SetNillableMealplanID(id *int) *EatinghistoryUpdateOne {
	if id != nil {
		euo = euo.SetMealplanID(*id)
	}
	return euo
}

// SetMealplan sets the mealplan edge to Mealplan.
func (euo *EatinghistoryUpdateOne) SetMealplan(m *Mealplan) *EatinghistoryUpdateOne {
	return euo.SetMealplanID(m.ID)
}

// SetTasteID sets the taste edge to Taste by id.
func (euo *EatinghistoryUpdateOne) SetTasteID(id int) *EatinghistoryUpdateOne {
	euo.mutation.SetTasteID(id)
	return euo
}

// SetNillableTasteID sets the taste edge to Taste by id if the given value is not nil.
func (euo *EatinghistoryUpdateOne) SetNillableTasteID(id *int) *EatinghistoryUpdateOne {
	if id != nil {
		euo = euo.SetTasteID(*id)
	}
	return euo
}

// SetTaste sets the taste edge to Taste.
func (euo *EatinghistoryUpdateOne) SetTaste(t *Taste) *EatinghistoryUpdateOne {
	return euo.SetTasteID(t.ID)
}

// SetUserID sets the user edge to User by id.
func (euo *EatinghistoryUpdateOne) SetUserID(id int) *EatinghistoryUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (euo *EatinghistoryUpdateOne) SetNillableUserID(id *int) *EatinghistoryUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the user edge to User.
func (euo *EatinghistoryUpdateOne) SetUser(u *User) *EatinghistoryUpdateOne {
	return euo.SetUserID(u.ID)
}

// Mutation returns the EatinghistoryMutation object of the builder.
func (euo *EatinghistoryUpdateOne) Mutation() *EatinghistoryMutation {
	return euo.mutation
}

// ClearFoodmenu clears the foodmenu edge to Foodmenu.
func (euo *EatinghistoryUpdateOne) ClearFoodmenu() *EatinghistoryUpdateOne {
	euo.mutation.ClearFoodmenu()
	return euo
}

// ClearMealplan clears the mealplan edge to Mealplan.
func (euo *EatinghistoryUpdateOne) ClearMealplan() *EatinghistoryUpdateOne {
	euo.mutation.ClearMealplan()
	return euo
}

// ClearTaste clears the taste edge to Taste.
func (euo *EatinghistoryUpdateOne) ClearTaste() *EatinghistoryUpdateOne {
	euo.mutation.ClearTaste()
	return euo
}

// ClearUser clears the user edge to User.
func (euo *EatinghistoryUpdateOne) ClearUser() *EatinghistoryUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// Save executes the query and returns the updated entity.
func (euo *EatinghistoryUpdateOne) Save(ctx context.Context) (*Eatinghistory, error) {

	var (
		err  error
		node *Eatinghistory
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EatinghistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EatinghistoryUpdateOne) SaveX(ctx context.Context) *Eatinghistory {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *EatinghistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EatinghistoryUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EatinghistoryUpdateOne) sqlSave(ctx context.Context) (e *Eatinghistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   eatinghistory.Table,
			Columns: eatinghistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eatinghistory.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Eatinghistory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: eatinghistory.FieldAddedTime,
		})
	}
	if euo.mutation.FoodmenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.FoodmenuTable,
			Columns: []string{eatinghistory.FoodmenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FoodmenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.FoodmenuTable,
			Columns: []string{eatinghistory.FoodmenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.MealplanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.MealplanTable,
			Columns: []string{eatinghistory.MealplanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mealplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.MealplanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.MealplanTable,
			Columns: []string{eatinghistory.MealplanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mealplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TasteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.TasteTable,
			Columns: []string{eatinghistory.TasteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taste.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TasteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.TasteTable,
			Columns: []string{eatinghistory.TasteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taste.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.UserTable,
			Columns: []string{eatinghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.UserTable,
			Columns: []string{eatinghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	e = &Eatinghistory{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{eatinghistory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
