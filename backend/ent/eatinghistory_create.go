// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/Teeth/app/ent/eatinghistory"
	"github.com/Teeth/app/ent/foodmenu"
	"github.com/Teeth/app/ent/mealplan"
	"github.com/Teeth/app/ent/taste"
	"github.com/Teeth/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EatinghistoryCreate is the builder for creating a Eatinghistory entity.
type EatinghistoryCreate struct {
	config
	mutation *EatinghistoryMutation
	hooks    []Hook
}

// SetAddedTime sets the added_time field.
func (ec *EatinghistoryCreate) SetAddedTime(t time.Time) *EatinghistoryCreate {
	ec.mutation.SetAddedTime(t)
	return ec
}

// SetFoodmenuID sets the foodmenu edge to Foodmenu by id.
func (ec *EatinghistoryCreate) SetFoodmenuID(id int) *EatinghistoryCreate {
	ec.mutation.SetFoodmenuID(id)
	return ec
}

// SetNillableFoodmenuID sets the foodmenu edge to Foodmenu by id if the given value is not nil.
func (ec *EatinghistoryCreate) SetNillableFoodmenuID(id *int) *EatinghistoryCreate {
	if id != nil {
		ec = ec.SetFoodmenuID(*id)
	}
	return ec
}

// SetFoodmenu sets the foodmenu edge to Foodmenu.
func (ec *EatinghistoryCreate) SetFoodmenu(f *Foodmenu) *EatinghistoryCreate {
	return ec.SetFoodmenuID(f.ID)
}

// SetMealplanID sets the mealplan edge to Mealplan by id.
func (ec *EatinghistoryCreate) SetMealplanID(id int) *EatinghistoryCreate {
	ec.mutation.SetMealplanID(id)
	return ec
}

// SetNillableMealplanID sets the mealplan edge to Mealplan by id if the given value is not nil.
func (ec *EatinghistoryCreate) SetNillableMealplanID(id *int) *EatinghistoryCreate {
	if id != nil {
		ec = ec.SetMealplanID(*id)
	}
	return ec
}

// SetMealplan sets the mealplan edge to Mealplan.
func (ec *EatinghistoryCreate) SetMealplan(m *Mealplan) *EatinghistoryCreate {
	return ec.SetMealplanID(m.ID)
}

// SetTasteID sets the taste edge to Taste by id.
func (ec *EatinghistoryCreate) SetTasteID(id int) *EatinghistoryCreate {
	ec.mutation.SetTasteID(id)
	return ec
}

// SetNillableTasteID sets the taste edge to Taste by id if the given value is not nil.
func (ec *EatinghistoryCreate) SetNillableTasteID(id *int) *EatinghistoryCreate {
	if id != nil {
		ec = ec.SetTasteID(*id)
	}
	return ec
}

// SetTaste sets the taste edge to Taste.
func (ec *EatinghistoryCreate) SetTaste(t *Taste) *EatinghistoryCreate {
	return ec.SetTasteID(t.ID)
}

// SetUserID sets the user edge to User by id.
func (ec *EatinghistoryCreate) SetUserID(id int) *EatinghistoryCreate {
	ec.mutation.SetUserID(id)
	return ec
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ec *EatinghistoryCreate) SetNillableUserID(id *int) *EatinghistoryCreate {
	if id != nil {
		ec = ec.SetUserID(*id)
	}
	return ec
}

// SetUser sets the user edge to User.
func (ec *EatinghistoryCreate) SetUser(u *User) *EatinghistoryCreate {
	return ec.SetUserID(u.ID)
}

// Mutation returns the EatinghistoryMutation object of the builder.
func (ec *EatinghistoryCreate) Mutation() *EatinghistoryMutation {
	return ec.mutation
}

// Save creates the Eatinghistory in the database.
func (ec *EatinghistoryCreate) Save(ctx context.Context) (*Eatinghistory, error) {
	if _, ok := ec.mutation.AddedTime(); !ok {
		return nil, &ValidationError{Name: "added_time", err: errors.New("ent: missing required field \"added_time\"")}
	}
	var (
		err  error
		node *Eatinghistory
	)
	if len(ec.hooks) == 0 {
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EatinghistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EatinghistoryCreate) SaveX(ctx context.Context) *Eatinghistory {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ec *EatinghistoryCreate) sqlSave(ctx context.Context) (*Eatinghistory, error) {
	e, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	e.ID = int(id)
	return e, nil
}

func (ec *EatinghistoryCreate) createSpec() (*Eatinghistory, *sqlgraph.CreateSpec) {
	var (
		e     = &Eatinghistory{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: eatinghistory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: eatinghistory.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.AddedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: eatinghistory.FieldAddedTime,
		})
		e.AddedTime = value
	}
	if nodes := ec.mutation.FoodmenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.FoodmenuTable,
			Columns: []string{eatinghistory.FoodmenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.MealplanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.MealplanTable,
			Columns: []string{eatinghistory.MealplanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mealplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TasteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.TasteTable,
			Columns: []string{eatinghistory.TasteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: taste.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   eatinghistory.UserTable,
			Columns: []string{eatinghistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return e, _spec
}
