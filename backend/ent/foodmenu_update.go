// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Teeth/app/ent/eatinghistory"
	"github.com/Teeth/app/ent/foodmenu"
	"github.com/Teeth/app/ent/predicate"
	"github.com/Teeth/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// FoodmenuUpdate is the builder for updating Foodmenu entities.
type FoodmenuUpdate struct {
	config
	hooks      []Hook
	mutation   *FoodmenuMutation
	predicates []predicate.Foodmenu
}

// Where adds a new predicate for the builder.
func (fu *FoodmenuUpdate) Where(ps ...predicate.Foodmenu) *FoodmenuUpdate {
	fu.predicates = append(fu.predicates, ps...)
	return fu
}

// SetFoodmenuName sets the foodmenu_name field.
func (fu *FoodmenuUpdate) SetFoodmenuName(s string) *FoodmenuUpdate {
	fu.mutation.SetFoodmenuName(s)
	return fu
}

// SetFoodmenuType sets the foodmenu_type field.
func (fu *FoodmenuUpdate) SetFoodmenuType(s string) *FoodmenuUpdate {
	fu.mutation.SetFoodmenuType(s)
	return fu
}

// SetOwnerID sets the owner edge to User by id.
func (fu *FoodmenuUpdate) SetOwnerID(id int) *FoodmenuUpdate {
	fu.mutation.SetOwnerID(id)
	return fu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (fu *FoodmenuUpdate) SetNillableOwnerID(id *int) *FoodmenuUpdate {
	if id != nil {
		fu = fu.SetOwnerID(*id)
	}
	return fu
}

// SetOwner sets the owner edge to User.
func (fu *FoodmenuUpdate) SetOwner(u *User) *FoodmenuUpdate {
	return fu.SetOwnerID(u.ID)
}

// AddEatinghistoryIDs adds the eatinghistory edge to Eatinghistory by ids.
func (fu *FoodmenuUpdate) AddEatinghistoryIDs(ids ...int) *FoodmenuUpdate {
	fu.mutation.AddEatinghistoryIDs(ids...)
	return fu
}

// AddEatinghistory adds the eatinghistory edges to Eatinghistory.
func (fu *FoodmenuUpdate) AddEatinghistory(e ...*Eatinghistory) *FoodmenuUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddEatinghistoryIDs(ids...)
}

// Mutation returns the FoodmenuMutation object of the builder.
func (fu *FoodmenuUpdate) Mutation() *FoodmenuMutation {
	return fu.mutation
}

// ClearOwner clears the owner edge to User.
func (fu *FoodmenuUpdate) ClearOwner() *FoodmenuUpdate {
	fu.mutation.ClearOwner()
	return fu
}

// RemoveEatinghistoryIDs removes the eatinghistory edge to Eatinghistory by ids.
func (fu *FoodmenuUpdate) RemoveEatinghistoryIDs(ids ...int) *FoodmenuUpdate {
	fu.mutation.RemoveEatinghistoryIDs(ids...)
	return fu
}

// RemoveEatinghistory removes eatinghistory edges to Eatinghistory.
func (fu *FoodmenuUpdate) RemoveEatinghistory(e ...*Eatinghistory) *FoodmenuUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemoveEatinghistoryIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fu *FoodmenuUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := fu.mutation.FoodmenuName(); ok {
		if err := foodmenu.FoodmenuNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "foodmenu_name", err: fmt.Errorf("ent: validator failed for field \"foodmenu_name\": %w", err)}
		}
	}
	if v, ok := fu.mutation.FoodmenuType(); ok {
		if err := foodmenu.FoodmenuTypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "foodmenu_type", err: fmt.Errorf("ent: validator failed for field \"foodmenu_type\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FoodmenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FoodmenuUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FoodmenuUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FoodmenuUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FoodmenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   foodmenu.Table,
			Columns: foodmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: foodmenu.FieldID,
			},
		},
	}
	if ps := fu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FoodmenuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foodmenu.FieldFoodmenuName,
		})
	}
	if value, ok := fu.mutation.FoodmenuType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foodmenu.FieldFoodmenuType,
		})
	}
	if fu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodmenu.OwnerTable,
			Columns: []string{foodmenu.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodmenu.OwnerTable,
			Columns: []string{foodmenu.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := fu.mutation.RemovedEatinghistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.EatinghistoryTable,
			Columns: []string{foodmenu.EatinghistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: eatinghistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EatinghistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.EatinghistoryTable,
			Columns: []string{foodmenu.EatinghistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: eatinghistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foodmenu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FoodmenuUpdateOne is the builder for updating a single Foodmenu entity.
type FoodmenuUpdateOne struct {
	config
	hooks    []Hook
	mutation *FoodmenuMutation
}

// SetFoodmenuName sets the foodmenu_name field.
func (fuo *FoodmenuUpdateOne) SetFoodmenuName(s string) *FoodmenuUpdateOne {
	fuo.mutation.SetFoodmenuName(s)
	return fuo
}

// SetFoodmenuType sets the foodmenu_type field.
func (fuo *FoodmenuUpdateOne) SetFoodmenuType(s string) *FoodmenuUpdateOne {
	fuo.mutation.SetFoodmenuType(s)
	return fuo
}

// SetOwnerID sets the owner edge to User by id.
func (fuo *FoodmenuUpdateOne) SetOwnerID(id int) *FoodmenuUpdateOne {
	fuo.mutation.SetOwnerID(id)
	return fuo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (fuo *FoodmenuUpdateOne) SetNillableOwnerID(id *int) *FoodmenuUpdateOne {
	if id != nil {
		fuo = fuo.SetOwnerID(*id)
	}
	return fuo
}

// SetOwner sets the owner edge to User.
func (fuo *FoodmenuUpdateOne) SetOwner(u *User) *FoodmenuUpdateOne {
	return fuo.SetOwnerID(u.ID)
}

// AddEatinghistoryIDs adds the eatinghistory edge to Eatinghistory by ids.
func (fuo *FoodmenuUpdateOne) AddEatinghistoryIDs(ids ...int) *FoodmenuUpdateOne {
	fuo.mutation.AddEatinghistoryIDs(ids...)
	return fuo
}

// AddEatinghistory adds the eatinghistory edges to Eatinghistory.
func (fuo *FoodmenuUpdateOne) AddEatinghistory(e ...*Eatinghistory) *FoodmenuUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddEatinghistoryIDs(ids...)
}

// Mutation returns the FoodmenuMutation object of the builder.
func (fuo *FoodmenuUpdateOne) Mutation() *FoodmenuMutation {
	return fuo.mutation
}

// ClearOwner clears the owner edge to User.
func (fuo *FoodmenuUpdateOne) ClearOwner() *FoodmenuUpdateOne {
	fuo.mutation.ClearOwner()
	return fuo
}

// RemoveEatinghistoryIDs removes the eatinghistory edge to Eatinghistory by ids.
func (fuo *FoodmenuUpdateOne) RemoveEatinghistoryIDs(ids ...int) *FoodmenuUpdateOne {
	fuo.mutation.RemoveEatinghistoryIDs(ids...)
	return fuo
}

// RemoveEatinghistory removes eatinghistory edges to Eatinghistory.
func (fuo *FoodmenuUpdateOne) RemoveEatinghistory(e ...*Eatinghistory) *FoodmenuUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemoveEatinghistoryIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (fuo *FoodmenuUpdateOne) Save(ctx context.Context) (*Foodmenu, error) {
	if v, ok := fuo.mutation.FoodmenuName(); ok {
		if err := foodmenu.FoodmenuNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "foodmenu_name", err: fmt.Errorf("ent: validator failed for field \"foodmenu_name\": %w", err)}
		}
	}
	if v, ok := fuo.mutation.FoodmenuType(); ok {
		if err := foodmenu.FoodmenuTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "foodmenu_type", err: fmt.Errorf("ent: validator failed for field \"foodmenu_type\": %w", err)}
		}
	}

	var (
		err  error
		node *Foodmenu
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FoodmenuMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FoodmenuUpdateOne) SaveX(ctx context.Context) *Foodmenu {
	f, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return f
}

// Exec executes the query on the entity.
func (fuo *FoodmenuUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FoodmenuUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FoodmenuUpdateOne) sqlSave(ctx context.Context) (f *Foodmenu, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   foodmenu.Table,
			Columns: foodmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: foodmenu.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Foodmenu.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.FoodmenuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foodmenu.FieldFoodmenuName,
		})
	}
	if value, ok := fuo.mutation.FoodmenuType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foodmenu.FieldFoodmenuType,
		})
	}
	if fuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodmenu.OwnerTable,
			Columns: []string{foodmenu.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodmenu.OwnerTable,
			Columns: []string{foodmenu.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := fuo.mutation.RemovedEatinghistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.EatinghistoryTable,
			Columns: []string{foodmenu.EatinghistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: eatinghistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EatinghistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.EatinghistoryTable,
			Columns: []string{foodmenu.EatinghistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: eatinghistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	f = &Foodmenu{config: fuo.config}
	_spec.Assign = f.assignValues
	_spec.ScanValues = f.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foodmenu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return f, nil
}
