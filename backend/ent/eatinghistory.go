// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/Teeth/app/ent/eatinghistory"
	"github.com/Teeth/app/ent/foodmenu"
	"github.com/Teeth/app/ent/mealplan"
	"github.com/Teeth/app/ent/taste"
	"github.com/Teeth/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Eatinghistory is the model entity for the Eatinghistory schema.
type Eatinghistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AddedTime holds the value of the "added_time" field.
	AddedTime time.Time `json:"added_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EatinghistoryQuery when eager-loading is set.
	Edges       EatinghistoryEdges `json:"edges"`
	foodmenu_id *int
	mealplan_id *int
	taste_id    *int
	user_id     *int
}

// EatinghistoryEdges holds the relations/edges for other nodes in the graph.
type EatinghistoryEdges struct {
	// Foodmenu holds the value of the foodmenu edge.
	Foodmenu *Foodmenu
	// Mealplan holds the value of the mealplan edge.
	Mealplan *Mealplan
	// Taste holds the value of the taste edge.
	Taste *Taste
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// FoodmenuOrErr returns the Foodmenu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EatinghistoryEdges) FoodmenuOrErr() (*Foodmenu, error) {
	if e.loadedTypes[0] {
		if e.Foodmenu == nil {
			// The edge foodmenu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: foodmenu.Label}
		}
		return e.Foodmenu, nil
	}
	return nil, &NotLoadedError{edge: "foodmenu"}
}

// MealplanOrErr returns the Mealplan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EatinghistoryEdges) MealplanOrErr() (*Mealplan, error) {
	if e.loadedTypes[1] {
		if e.Mealplan == nil {
			// The edge mealplan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: mealplan.Label}
		}
		return e.Mealplan, nil
	}
	return nil, &NotLoadedError{edge: "mealplan"}
}

// TasteOrErr returns the Taste value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EatinghistoryEdges) TasteOrErr() (*Taste, error) {
	if e.loadedTypes[2] {
		if e.Taste == nil {
			// The edge taste was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: taste.Label}
		}
		return e.Taste, nil
	}
	return nil, &NotLoadedError{edge: "taste"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EatinghistoryEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Eatinghistory) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // added_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Eatinghistory) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // foodmenu_id
		&sql.NullInt64{}, // mealplan_id
		&sql.NullInt64{}, // taste_id
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Eatinghistory fields.
func (e *Eatinghistory) assignValues(values ...interface{}) error {
	if m, n := len(values), len(eatinghistory.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time", values[0])
	} else if value.Valid {
		e.AddedTime = value.Time
	}
	values = values[1:]
	if len(values) == len(eatinghistory.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field foodmenu_id", value)
		} else if value.Valid {
			e.foodmenu_id = new(int)
			*e.foodmenu_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field mealplan_id", value)
		} else if value.Valid {
			e.mealplan_id = new(int)
			*e.mealplan_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field taste_id", value)
		} else if value.Valid {
			e.taste_id = new(int)
			*e.taste_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			e.user_id = new(int)
			*e.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryFoodmenu queries the foodmenu edge of the Eatinghistory.
func (e *Eatinghistory) QueryFoodmenu() *FoodmenuQuery {
	return (&EatinghistoryClient{config: e.config}).QueryFoodmenu(e)
}

// QueryMealplan queries the mealplan edge of the Eatinghistory.
func (e *Eatinghistory) QueryMealplan() *MealplanQuery {
	return (&EatinghistoryClient{config: e.config}).QueryMealplan(e)
}

// QueryTaste queries the taste edge of the Eatinghistory.
func (e *Eatinghistory) QueryTaste() *TasteQuery {
	return (&EatinghistoryClient{config: e.config}).QueryTaste(e)
}

// QueryUser queries the user edge of the Eatinghistory.
func (e *Eatinghistory) QueryUser() *UserQuery {
	return (&EatinghistoryClient{config: e.config}).QueryUser(e)
}

// Update returns a builder for updating this Eatinghistory.
// Note that, you need to call Eatinghistory.Unwrap() before calling this method, if this Eatinghistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Eatinghistory) Update() *EatinghistoryUpdateOne {
	return (&EatinghistoryClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Eatinghistory) Unwrap() *Eatinghistory {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Eatinghistory is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Eatinghistory) String() string {
	var builder strings.Builder
	builder.WriteString("Eatinghistory(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", added_time=")
	builder.WriteString(e.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Eatinghistories is a parsable slice of Eatinghistory.
type Eatinghistories []*Eatinghistory

func (e Eatinghistories) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
